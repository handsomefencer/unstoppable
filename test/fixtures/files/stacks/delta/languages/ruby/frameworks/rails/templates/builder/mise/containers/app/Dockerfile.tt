# syntax=docker/dockerfile:1

FROM ruby:<%= @env[:base][:ruby_version][:value] %>-alpine AS base

<%= partial('dockerfile_base') %>

FROM base AS builder

<%= partial('dockerfile_builder') %>

FROM builder AS development

RUN gem install bundler:<%= @env[:base][:bundler_version][:value] %>

WORKDIR /app

COPY  Gemfile* ./

RUN bundle install -j4 --retry 3

COPY package.json  .
COPY yarn.lock .

RUN yarn install

COPY . .

RUN chmod -R 755 entrypoints/docker-entrypoint.sh

CMD ["./entrypoints/docker-entrypoint.sh"]

FROM builder AS stripper

WORKDIR /app

COPY Gemfile* .

RUN bundle config --local without 'development test' 
RUN bundle install -j4 --retry 3 
RUN bundle exec bootsnap precompile --gemfile || true  
RUN bundle clean --force
RUN rm -rf /usr/local/bundle/cache
RUN find /usr/local/bundle/gems/ -name "*.c" -delete
RUN find /usr/local/bundle/gems/ -name "*.o" -delete

COPY . /app

RUN bundle exec bootsnap precompile app/ lib/ || true
RUN bundle exec rails assets:precompile

RUN rm -rf node_modules yarn.lock .yarn vendor/bundle test spec app/packs
RUN if [ ! -f config/importmap.rb ]; then rm -rf app/javascript; fi

FROM base AS production

RUN apk add --no-cache \
  xz-libs \
  brotli-libs 

RUN apk add --no-cache \
  <%= @env[:production][:db_pkg][:value] %> 

WORKDIR /app

RUN addgroup -g 1000 -S app && \
  adduser -u 1000 -S app -G app

COPY --from=stripper --chown=app:app /usr/local/bundle/ /usr/local/bundle/
COPY --from=stripper --chown=app:app /app /app

RUN chmod -R 755 entrypoints/docker-entrypoint.sh

CMD ["./entrypoints/docker-entrypoint.sh"]